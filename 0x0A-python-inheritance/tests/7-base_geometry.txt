#test instantiation added more letters for lenght check
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

#REGULAR TEST :v
>>> bg.integer_validator("john", 12)

#testing if the code works
>>> bg.area()
Traceback (most recent call last):
	...
Exception: area() is not implemented



>>> bg.integer_validator("number","40") 
Traceback (most recent call last):
	...
TypeError: number must be an integer

>>> bg.integer_validator("number", -1)
Traceback (most recent call last):
	...
ValueError: number must be greater than 0

>>> bg.integer_validator("number", 0)
Traceback (most recent call last):
	...
ValueError: number must be greater than 0

>>> bg.integer_validator(None, 2)
	
>>> bg.integer_validator(1)
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator(value=17)
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'name'
	
>>> bg.integer_validator("number",{40, 0}) 
Traceback (most recent call last):
	...
TypeError: number must be an integer
	
>>> bg.integer_validator("number",[40, 20]) 
Traceback (most recent call last):
	...
TypeError: number must be an integer

>>> bg.integer_validator("number", True) 
Traceback (most recent call last):
	...
TypeError: number must be an integer

>>> bg.integer_validator("number", None) 
Traceback (most recent call last):
	...
TypeError: number must be an integer

>>> bg.integer_validator("number",(20, 30)) 
Traceback (most recent call last):
	...
TypeError: number must be an integer
